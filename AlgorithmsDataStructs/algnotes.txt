https://www.geeksforgeeks.org/fundamentals-of-algorithms/
1. Brute Force
Pros:

The brute force approach is a guaranteed way to find the correct solution by listing all the possible candidate solutions for the problem.
It is a generic method and not limited to any specific domain of problems.
The brute force method is ideal for solving small and simpler problems.
It is known for its simplicity and can serve as a comparison benchmark.


Cons:

The brute force approach is inefficient. For real-time problems, algorithm analysis often goes above the O(N!) order of growth.
This method relies more on compromising the power of a computer system for solving a problem than on a good algorithm design.
Brute force algorithms are slow.
Brute force algorithms are not constructive or creative compared to algorithms that are constructed using some other design paradigms.

2. BackTracking Algorithm


 The backtracking algorithm basically builds the solution by searching among 
all possible solutions. Using this algorithm, we keep on building the solution following criteria.
Whenever a solution fails we trace back to the failure point and build on the next solution and 
continue this process till we find the solution or all possible solutions are looked after.

3. Hashing Algorithms

Hashing Algorithm: Hashing algorithms work similarly to the searching algorithm. 
But they contain an index with a key ID. In hashing, a key is assigned to specific data.

4. Greedy Algorithm

 Greedy Algorithm: In this type of algorithm the solution is built part by part. 
 The solution of the next part is built based on the immediate benefit of the next part. 
 The one solution giving the most benefit will be chosen as the solution for the next part.

 5. Dynamic Programming

 This algorithm uses the concept of using the already found solution to avoid repetitive calculation of the same part of the problem. 
 It divides the problem into smaller overlapping subproblems and solves them.

 6. Randomized Programming

In the randomized algorithm we use a random number so it gives immediate benefit. 
The random number helps in deciding the expected outcome.




Space Complexity

Auxiliary Space is the extra space or temporary space used by an algorithm.

The space Complexity of an algorithm is the total space taken by the algorithm with respect to the 
input size. Space complexity includes both Auxiliary space and space used by input. 

Memory



You can sort arrays or collection, then use a search algorithm

SOURCES:
https://www.geeksforgeeks.org/graph-data-structure-and-algorithms/
https://www.geeksforgeeks.org/learn-data-structures-and-algorithms-dsa-tutorial/?ref=shm



